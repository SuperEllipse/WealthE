name: Finbot that holds conversation memory with performance evaluation
description: A Finance educator bot trained on financial markets knowledge system, that answers Q&A.
author: Vish Rajagopalan
specification_version: 1.0
prototype_version: 1.0
date: "2024-05-10"

environment_variables:
  LLM:
    default: "llama3"
    description: "Define the Large language model to be pulled by Ollama"
    required: True

  # OLLAMA_HOST:
  # default: "127.0.0.1:8080"
  # description: "Define the Large language model to be pulled by Ollama"
  # required: True

  # OLLAMA_PORT:
  # default: "8080"
  # description: "Define the port to be used by Ollama service"
  # required: True

  # The OLLAMA BASE URL should be of the format http://OLLAMA_HOST in case you are changing the host and the port values
  # the value below should also be changed
  # OLLAMA_BASE_URL:
  # default: "http://127.0.0.1:8080"
  # description: "Define the Large language model to be pulled by Ollama"
  # required: True  

runtimes:
  - editor: PBJ Workbench ## Other acceptable values are determined by the runtimes available in your CML environment
    kernel: Python 3.11 ## Same here, check your runtimes (custom runtimes can be added as well)
    edition: NVIDIA GPU Ollama ## Particularly relevant if using GPUs, Nvidia GPU
    version: 2
## Below are some sample tasks based on some of the most popular aspects of AMP creation.
tasks:

  ## Step 0: SESSION to install dependecies
  - type: run_session
    name: Install Dependencies
    script: 0_session-install-dependencies/install_dependencies.py
    short_summary: Install Requirements and Dependencies
    kernel: python3
    cpu: 2
    memory: 4

  ## Step 1: JOB related AMP Ingest Dataset
  - type: run_session
    name: Ingest Dataset
    entity_label: create_dataset_job
    script: 1_job-ingest-dataset/site_scrapper.py
    short_summary: Ingest dataset to be added later into the vector database    
    arguments: None
    cpu: 2
    memory: 4


  ## Step 2: JOB related to set up Vector DB
  - type: run_session
    name: Create Vector Database
    entity_label: create_vectordb_job
    script: 2_job-create-vector-db/bootstrap_ollama.py
    short_summary: Setup the vector database
    arguments: None
    cpu: 2
    memory: 4

  ## Step 3 : Build the Evaluations dashboard
  - type: run_session
    name: LLM Evaluation using the Trulens Dashboard
    short_summary: Use Trulens to evaluate our LLM based on the evaluation questions in assets/data/questions/evaluation_questions.txt.
    long_summary: We use the RAG Triad of Relevance, Groundednes and Context Relevance explained in the README to evaluate our LLM.
    script: 3_session-evaluate-llm/evaluation.py
    cpu: 8
    memory: 32
    gpu: 1

  ## Step 4: Save Evaluations in Mlflow for traceability and reproducability
  - type: run_session
    name: Save evaluations in mlflow
    entity_label: create_saveevaluations_session
    script: 5_session-save-evaluations-in-mlflow/persist.py
    short_summary: Log the evaluations in Mlflow
    arguments: None
    cpu: 2
    memory: 4

  ## Step 5:  Run Tru lens Evaluation Dashboard
  - type: start_application
    name: LLM Evaluation using the Trulens Dashboard
    short_summary: Use Trulens to evaluate our LLM based on the evaluation questions in assets/data/questions/evaluation_questions.txt.
    long_summary: We use the RAG Triad of Relevance, Groundednes and Context Relevance explained in the README to evaluate our LLM.
    subdomain: eval-dashboard
    script: 4_app-run-evaluation-dashboard/app.py
    cpu: 3
    memory: 4
    environment_variables:
      TASK_TYPE: START_APPLICATION

  ## Step 5:  Run WealthE
  - type: start_application
    name: Start WealthE Application
    short_summary:  WealthE application uses Chainlit to provide a Q&A on Indian Capital markets
    long_summary: Use the Application for Q&A on Indian capital markets. The application also remembers the prior question, so you can ask "can you elaborate?"
    subdomain: wealthe
    script: 6_app-run-chat-bot/app.py
    cpu: 8
    memory: 32
    gpu: 1
    environment_variables:
      TASK_TYPE: START_APPLICATION